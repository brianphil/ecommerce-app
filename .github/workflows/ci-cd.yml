name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.11"
  POSTGRES_VERSION: "15"

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_ecommerce_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage pytest-xdist

      - name: Set up environment variables
        run: |
          echo "SECRET_KEY=test-secret-key" >> $GITHUB_ENV
          echo "DEBUG=True" >> $GITHUB_ENV
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_NAME=test_ecommerce_db" >> $GITHUB_ENV
          echo "DB_USER=postgres" >> $GITHUB_ENV
          echo "DB_PASSWORD=postgres" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
          echo "AFRICAS_TALKING_USERNAME=sandbox" >> $GITHUB_ENV
          echo "AFRICAS_TALKING_API_KEY=test_key" >> $GITHUB_ENV
          echo "EMAIL_HOST_USER=test@example.com" >> $GITHUB_ENV
          echo "EMAIL_HOST_PASSWORD=test_password" >> $GITHUB_ENV
          echo "ADMIN_EMAIL=admin@test.com" >> $GITHUB_ENV

      - name: Run migrations
        run: |
          python manage.py migrate

      - name: Run linting
        run: |
          # Install linting tools
          pip install flake8 black isort

          # Check code formatting
          black --check .

          # Check import sorting
          isort --check-only .

          # Run flake8 linting
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run tests with coverage
        run: |
          coverage run --source='.' manage.py test
          coverage report
          coverage xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Check for security issues
        run: |
          pip install safety bandit
          safety check
          bandit -r . -x /tests/

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/ecommerce-backend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config

      - name: Deploy to Kubernetes
        run: |
          # Update image tag in deployment
          sed -i "s|ecommerce-backend:latest|${{ secrets.DOCKER_USERNAME }}/ecommerce-backend:${{ github.sha }}|g" k8s/deployment.yaml

          # Apply Kubernetes manifests
          kubectl apply -f k8s/

          # Wait for deployment to complete
          kubectl rollout status deployment/ecommerce-backend -n default --timeout=300s

      - name: Run database migrations
        run: |
          # Get the first pod from the deployment
          POD_NAME=$(kubectl get pods -l app=ecommerce-backend -o jsonpath="{.items[0].metadata.name}")

          # Run migrations
          kubectl exec $POD_NAME -- python manage.py migrate

      - name: Verify deployment
        run: |
          kubectl get services
          kubectl get deployments
          kubectl get pods

  notify:
    needs: [test, build, deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify Slack on success
        if: ${{ needs.test.result == 'success' && needs.build.result == 'success' && needs.deploy.result == 'success' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: |
            üéâ Deployment successful!
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}

      - name: Notify Slack on failure
        if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' || needs.deploy.result == 'failure' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: danger
          SLACK_MESSAGE: |
            ‚ùå Deployment failed!
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Check the workflow for details.
